snippet =
	<?= ${0} ?>
snippet pt
	<?php

	namespace ${1:FooTests\Bar};

	use ${2:Foo\Bar}\\${3:FooBar};
	use PHPUnit_Framework_TestCase;

	/**
	 * @author Marcelo Jacobus <marcelo.jacobus@gmail.com>
	 */
	class `vim_snippets#Filename()` extends PHPUnit_Framework_TestCase
	{
	    protected $object;
	
	    public function setUp()
	    {
	        $this->object = new $3();
	    }
	}
snippet pc
	<?php

	namespace ${1:Foo\Bar};

	/**
	 * @author Marcelo Jacobus <marcelo.jacobus@gmail.com>
	 */
	class ${2:`vim_snippets#Filename()`}
	{
		${3}
	}
snippet php
	<?php ${1} ?>
snippet phpend
	?>
snippet phend
	?>
snippet pas
	$this->assertSame(${1:\$expected}, ${2:\$actual});
snippet pae
	$this->assertEquals(${1:\$expected}, ${2:\$actual});
snippet pm
	${1:public} function ${2:functionName}(${3})
	{
		${4}
	}
snippet ptm
	/**
	 * @test
	 */
	public function ${1:functionName}()
	{
		${2}
	}
snippet pcm
	/**
	 * ${1}
	 */
snippet pfc
	/**
	 * @group focus
	 */
snippet aut
	/**
	 * @author Marcelo Jacobus <marcelo.jacobus@gmail.com>
	 */
snippet ps
	/**
	 * @var string
	 */
	${1:protected} \$${2:property} = \$${string};
	
snippet pa
	/**
	 * @var array
	 */
	${1:protected} \$${2:property} = array();
	
snippet pn
	/**
	 * @var array
	 */
	${1:protected} \$${2:property};
	
