" ========================================================================
" Plugins: Vundle config
" ========================================================================
  set nocompatible              " be iMproved, required
  filetype off                  " required

  " set the runtime path to include Vundle and initialize
  set rtp+=~/.vim/Vundle.vim
  call vundle#begin()

  " Bundle "ervandew/supertab"
  " Bundle "vim-scripts/ZoomWin"
  Bundle "austintaylor/vim-commaobject"
  Bundle "w0ng/vim-hybrid"
  Bundle "jonathanfilip/vim-lucius"
  Bundle "altercation/vim-colors-solarized"
  Bundle "tristen/vim-sparkup"
  Bundle "othree/html5.vim"
  Bundle "tpope/vim-repeat"
  Bundle "tpope/vim-surround"
  Bundle "wikitopian/hardmode"
  Bundle "airblade/vim-gitgutter"
  Bundle "tpope/vim-fugitive"
  Bundle "rking/ag.vim"
  Bundle "sirver/ultisnips"
  Bundle "mjacobus/vim-snippets"
  Bundle "tomtom/tcomment_vim"
  Bundle "Lokaltog/vim-easymotion"
  " fixed "jiangmiao/auto-pairs"
  Bundle "yukunlin/auto-pairs"
  Bundle "mattn/webapi-vim.git"
  Bundle "mattn/gist-vim.git"
  Bundle "scrooloose/nerdtree"
  Bundle "kien/ctrlp.vim"
  Bundle "godlygeek/tabular"
  Bundle "scrooloose/syntastic"
  Bundle "weierophinney/argumentrewrap"
  Bundle "docteurklein/php-getter-setter.vim"
  Bundle "joonty/vdebug"
  Bundle "shawncplus/phpcomplete.vim"
  Bundle "arnaud-lb/vim-php-namespace"
  Bundle "vim-scripts/ruby-matchit"
  Bundle "mjacobus/vim-rspec-focus"
  Bundle "vim-ruby/vim-ruby"
  Bundle "tpope/vim-rails"
  Bundle "thoughtbot/vim-rspec"
  Bundle "shawncplus/Vim-toCterm"
  " Bundle "Valloric/YouCompleteMe"

  " ending vundle
  call vundle#end()            " required
  filetype plugin indent on    " required

  source ~/.vim/functions.vim

" ========================================================================
" Options:
" ========================================================================
  set background=dark

  syntax on
  let mapleader = ","

  " different color for each paren pairs
  let vimclojure#ParenRainbow = 1

  if exists('+undodir')
    set undodir=~/.vim/undodir
    set undofile
    if filewritable(&undodir) == 0
      call mkdir(&undodir, "p")
    endif
  endif

  if exists('+colorcolumn')
    set colorcolumn=80
  endif

  set autoindent
  set autoread
  set backspace=2
  set backspace=indent,eol,start
  set clipboard=unnamedplus
  set cursorline
  set directory=/tmp/
  set display=lastline
  set expandtab tabstop=2 softtabstop=2 shiftwidth=2
  set foldlevel=1
  set foldmethod=syntax
  set guicursor=a:blinkon0
  set hidden
  set hlsearch
  set ignorecase smartcase
  set laststatus=2
  set list
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
  set mouse=""
  set nobackup
  set noincsearch
  set noswapfile
  set nowrap
  set number numberwidth=2
  set pastetoggle=<F3>
  set ruler rulerformat=%=%l/%L
  set scrolloff=4 sidescrolloff=10
  set showcmd
  set showmatch
  set smarttab
  set splitbelow
  set splitright
  set tabpagemax=20
  set ttyfast
  set visualbell
  set wildmenu
  set wildmode=list:longest,full
  set statusline=[%n]\ %<%.99f\ %h%w%m%r%{ETry('CapsLockStatusline')}%y%{ETry('rails#statusline')}%{ETry('fugitive#statusline')}%#ErrorMsg#%*%=%-16(\ %l,%c-%v\ %)%P
  set tags+=./tags.vendors,tags.vendors

" ========================================================================
" Mappings:
" ========================================================================

  " tags
  nnoremap <f4> :! ctags <cr>

  " rm file
  nnoremap <leader>rm :! rm %<cr>

  " escape alias
  inoremap jj <esc>l
  inoremap jJ <esc>l
  inoremap JJ <esc>l

  " navigation
  noremap <space> 10j
  noremap <leader><space> 10k

  " buffer changing
  nnoremap <leader>bn :bn<cr>
  nnoremap <leader>bp :bp<cr>

  " closes buffer
  nnoremap <leader>bd :bd<cr>
  nnoremap <leader>bdd :bd!<cr>
  nnoremap <leader>bda :bufdo %bd!<cr>
  nnoremap <leader>n :NERDTree<cr>

  " saves from normal mode
  nnoremap <leader>s :w<cr>
  nnoremap <leader>S :w<cr>

  " saves and exits insert mode
  inoremap <leader>s <ESC>:w<cr>
  inoremap <leader>S <ESC>:w<cr>

  " Select all
  nnoremap <leader>a ggVG

  " new tab
  nnoremap <c-w>t :tabnew<cr>

  " jumps to the next position after the closest closing char
  inoremap <leader>e <Esc>/[\]})"']<cr><Esc>:nohlsearch<cr>a
  nnoremap <leader>e <Esc>/[\]})"']<cr><Esc>:nohlsearch<cr>a

  " adds arrow
  inoremap <C-l> <Space>=><Space>,<left>

  " Ruby old style hashes to new style hashes
  vnoremap <leader>h :s/:\(\w*\) *=>/\1:/g<cr>

  " Rails specific
  " nnoremap <Leader>ac :sp app/controllers/application_controller.rb<cr>
  vnoremap <leader>h :s/\:\([a-zA-Z_]\+\)\s\+=>/\=printf("%s:", submatch(1))/g<CR><ESC>:let @/ = ""<CR>
  nnoremap <Leader>quit <ESC>:q<cr>

  " save and quit Run Ruby, for interactive editor
  nnoremap <Leader>rr <esc>:wq<CR>

  " Open vim rc
  nnoremap <Leader>vim :vsplit $MYVIMRC<CR>
  nnoremap <Leader>rel :source $MYVIMRC<CR>

  " Fix anoying original K
  nnoremap K <nop>
  nnoremap U <nop>

  " Find
  inoremap <leader>f <ESC>/
  nnoremap <leader>f <ESC>/

  " php specific
  "
  autocmd FileType php inoremap <buffer> <C-.> .
  autocmd FileType php inoremap <buffer> ... ../
  autocmd FileType php inoremap <buffer> .. ->
  autocmd FileType php inoremap <buffer> .a ->a
  autocmd FileType php inoremap <buffer> .b ->b
  autocmd FileType php inoremap <buffer> .c ->c
  autocmd FileType php inoremap <buffer> .d ->d
  autocmd FileType php inoremap <buffer> .e ->e
  autocmd FileType php inoremap <buffer> .f ->f
  autocmd FileType php inoremap <buffer> .g ->g
  autocmd FileType php inoremap <buffer> .h ->h
  autocmd FileType php inoremap <buffer> .i ->i
  autocmd FileType php inoremap <buffer> .j ->j
  autocmd FileType php inoremap <buffer> .k ->k
  autocmd FileType php inoremap <buffer> .l ->l
  autocmd FileType php inoremap <buffer> .m ->m
  autocmd FileType php inoremap <buffer> .n ->n
  autocmd FileType php inoremap <buffer> .o ->o
  autocmd FileType php inoremap <buffer> .p ->p
  autocmd FileType php inoremap <buffer> .q ->q
  autocmd FileType php inoremap <buffer> .r ->r
  autocmd FileType php inoremap <buffer> .s ->s
  autocmd FileType php inoremap <buffer> .t ->t
  autocmd FileType php inoremap <buffer> .u ->u
  autocmd FileType php inoremap <buffer> .v ->v
  autocmd FileType php inoremap <buffer> .x ->x
  autocmd FileType php inoremap <buffer> .v ->v
  autocmd FileType php inoremap <buffer> .y ->y
  autocmd FileType php inoremap <buffer> .w ->w
  autocmd FileType php inoremap <buffer> ._ ->_
  autocmd FileType php inoremap <buffer> ;; <esc>$a;

  " convert file to latin1 and reloads
  nnoremap <leader>lat1 :write ++enc=latin1<cr>:e<cr>

  " Use Q for formatting the current paragraph (or selection)
  vnoremap Q gq
  nnoremap Q gqap

  " clear search
  nnoremap <silent> ,/ :nohlsearch<CR>

  " Avoid arrow keys in command mode
  cnoremap <C-h> <left>
  cnoremap <C-j> <down>
  cnoremap <C-k> <up>
  cnoremap <C-l> <right>
  cnoremap <C-x> <del>

  " Control Ctrl and Ctrl V
  vnoremap <C-c> "+y
  vnoremap <leader>c "+y
  inoremap <C-v> <esc>:set paste<cr>"+p:set nopaste<cr>i
  nnoremap <leader>v :set paste<cr>"+p:set nopaste<cr>i

  " buffer resizing mappings (shift + arrow key)
  nnoremap <Up> <c-w>+
  nnoremap <Down> <c-w>-
  nnoremap <Left> <c-w><
  nnoremap <Right> <c-w>>

  " Trim all trailing whitespaces no questions asked.
  nnoremap <leader>wt :call TrimWhiteSpace()<cr>

  " quotes
  " Single quote word
  nnoremap <leader>sq ciw''<esc><left>p
  " double quote word
  nnoremap <leader>dq ciw""<esc><left>p

  " Execute last command over a visual selection
  vnoremap . :norm.<CR>

  " Resolving conflics
  " Vimcasts #33
  nnoremap <leader>gd :Gdiff<cr>
  " get target version: diff get target
  nnoremap <leader>dgt :diffget //2 \| :diffupdate<cr>
  " get branch version: diff get branch
  nnoremap <leader>dgb :diffget //3 \| :diffupdate<cr>

  " quotes
  nnoremap <leader>qw ciw''<esc>P
  nnoremap <leader>qw ciw""<esc>P

  " sort block
  nnoremap <leader>sb vip:sort<cr>
  nnoremap <leader>sa vi(:sort<cr>

  " wrap selection inside caracter
  vnoremap ( "zdi(<C-R>z)<ESC>
  vnoremap { "zdi{<C-R>z}<ESC>
  vnoremap [ "zdi[<C-R>z]<ESC>
  vnoremap ' "zdi'<C-R>z'<ESC>
  vnoremap " "zdi"<C-R>z"<ESC>


" ========================================================================
" Plugin Configuration and mappings
" ========================================================================

  " vim-to-cterm
  nnoremap tocterm :source ~/.vim/bundle/Vim-toCterm/tocterm.vim<CR>

  " vim-rspec
  let g:rspec_command = "!rspec --drb {spec}"
  autocmd FileType ruby nnoremap <buffer> <leader>t :call RunCurrentSpecFile()<cr>
  nnoremap <leader>n :call RunNearestSpec()<CR>
  nnoremap <C-l> :call RunLastSpec()<CR>
  nnoremap <leader>l :call RunLastSpec()<CR>
  nnoremap <Leader>o :w<cr>:call RunCurrentLineInTest()<CR>

  " php cs fixer
  autocmd FileType php nnoremap <leader>pff  :call PhpCsFix('%')<cr>
  autocmd FileType php nnoremap <leader>pfaf :call PhpCsFix('.')<cr>

  " php use
  nnoremap <Leader>u <C-O>:call PhpInsertUse()<CR>


  " php-getter-setter
  autocmd FileType php nnoremap <leader>pg :InsertGetterOnly<cr>
  autocmd FileType php nnoremap <leader>ps :InsertSetterOnly<cr>
  autocmd FileType php nnoremap <leader>pgs :InsertBothGetterSetter<cr>

    let b:phpgetset_setterTemplate =
      \ "\n" .
      \ "    public function %funcname%($%varname%)\n" .
      \ "    {\n" .
      \ "        $this->%varname% = $%varname%;\n" .
      \ "    }"

    let b:phpgetset_getterTemplate =
        \ "\n" .
        \ "    public function %funcname%()\n" .
        \ "    {\n" .
        \ "        return $this->%varname%;\n" .
        \ "    }"

  " tabular
  let g:syntastic_enable_signs=1
  let g:syntastic_quiet_messages = {'level': 'warning'}
  " let g:syntastic_php_checkers=['php', 'phpcs']
  " let g:syntastic_php_phpcs_args='--standard=PSR2 -n'
  let g:syntastic_php_phpcs_args='--standard=PSR2'
  " syntastic is too slow for haml and sass
  let g:syntastic_mode_map = { 'mode': 'active',
                             \ 'active_filetypes': [],
                             \ 'passive_filetypes': ['haml','scss','sass'] }

  " tabular
  function! CustomTabularPatterns()
    if exists('g:tabular_loaded')
      AddTabularPattern! symbols / :/l0
      AddTabularPattern! hash /^[^>]*\zs=>/
      AddTabularPattern! chunks / \S\+/l0
      AddTabularPattern! assignment / = /l0
      AddTabularPattern! comma /^[^,]*,/l1
      AddTabularPattern! colon /:\zs /l0
      AddTabularPattern! options_hashes /:\w\+ =>/
    endif
  endfunction

  autocmd VimEnter * call CustomTabularPatterns()

  nnoremap a= :Tabularize /=<CR>
  vnoremap a= :Tabularize /=<CR>
  nnoremap a: :Tabularize /:\zs<CR>
  vnoremap a: :Tabularize /:\zs<CR>
  nnoremap ar :Tabularize /=><CR>
  vnoremap ar :Tabularize /=><CR>

  " Ultisnips
  " If you want :UltiSnipsEdit to split your window.
  let g:UltiSnipsEditSplit="vertical"
  let g:snips_author="Marcelo Jacobus <marcelo.jacobus@gmail.com>"

  " sparkup
  let g:sparkupExecuteMapping = '<C-Y>,'
  let g:sparkupNextMapping = '<c-y>n'

  " solarized
  let g:solarized_termcolors=256

  " ctrl P
  let g:ctrlp_max_height = 30
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files .']
  " let g:ctrlp_working_path_mode = 'c'
  " set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
  " set wildignore+='\v[\/]\.(git|hg|svn)$'
  let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/](\.(git|hg|svn)|data|tmp|log)$',
    \ 'file': '\v\.(exe|so|dll)$',
    \ 'link': 'some_bad_symbolic_links',
    \ }

  " gits
  if has("mac")
    let g:gist_clip_command = 'pbcopy'
  elseif has("unix")
    let g:gist_clip_command = 'xclip -selection clipboard'
  endif

  let g:gist_detect_filetype = 1
  let g:gist_open_browser_after_post = 1
  " does not work right after the plugin
  nnoremap <leader>wa :call argumentrewrap#RewrapArguments()<CR>

  " rails.vim
  nnoremap <leader>av :AV<cr>
  nnoremap <leader>as :AS<cr>
  nnoremap <Leader>va :AV<cr>
  nnoremap <Leader>sa :AS<cr>
  nnoremap <Leader>vc :RVcontroller<cr>
  nnoremap <Leader>sc :RScontroller<cr>
  nnoremap <Leader>vu :RVunittest<CR>
  nnoremap <Leader>su :RSunittest<CR>
  nnoremap <Leader>vv :RVview<cr>
  nnoremap <Leader>sv :RSview<cr>
  nnoremap <Leader>m :Rmodel<cr>
  nnoremap <Leader>sm :RSmodel<cr>
  nnoremap <Leader>vm :RVmodel<cr>

  " ag.vim
  nnoremap g/ :Ag!<space>
  nnoremap g# :Ag! -w <C-R><C-W><space>
  nnoremap ga :AgAdd!<space>
  nnoremap gn :cnext<CR>
  nnoremap gp :cprev<CR>
  nnoremap gq :ccl<CR>
  nnoremap gl :cwindow<CR>

  " fugitive
  autocmd BufReadPost fugitive://* set bufhidden=delete
  nnoremap <Leader>gac :Gcommit -am ""<LEFT>
  nnoremap <Leader>gc :Gcommit -m ""<LEFT>
  nnoremap <Leader>gs :Gstatus<CR>
  nnoremap <leader>gw :Gwrite<cr>
  nnoremap <leader>gb :Gblame<cr>

  " autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
  nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>

  " nerdtree
  nnoremap <c-n> :NERDTreeToggle<CR>


" ========================================================================
" Autocommands:
" ========================================================================
  autocmd BufWrite * :call <sid>MkdirsIfNotExists(expand('<afile>:h'))
  " TODO: find out why it wont work when the function is not herer
  function! <SID>MkdirsIfNotExists(directory)
    if(!isdirectory(a:directory))
      call system('mkdir -p '.shellescape(a:directory))
    endif
  endfunction

  autocmd FileType php nnoremap <buffer> <leader>t <esc>:call PHPUnitCurrentFile()<cr>
  autocmd FileType php nnoremap <buffer> <leader>at <esc>:call PHPUnitAll()<cr>
  autocmd FileType php nnoremap <buffer> <leader>nt <esc>:call PHPUnitFocused()<cr>
  autocmd FileType php nnoremap <buffer> <leader>mt <esc>:call PHPUnitZendModule()<cr>
  autocmd FileType php nnoremap <buffer> <leader>cu <esc>:! clear && ./curl.sh<cr>
  autocmd FileType php nnoremap <buffer> <leader>ct <esc>:call PHPUnitCreateTestFile()<cr>
  autocmd FileType php nnoremap <buffer> <leader>ot <esc>:call PHPUnitCreateTestFile()<cr>
  autocmd FileType php nnoremap <buffer> <leader>pp <esc>:! clear && time php %<cr>
  autocmd FileType php nnoremap <buffer> <leader>ce <esc>:vsplit curl.sh<cr>

  " remember last position in file
  autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

  " Thorfile, Rakefile, Vagrantfile, and Gemfile are Ruby
  autocmd BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby

  " hb is handlebars
  autocmd BufNewFile,BufRead *.hb set ai filetype=handlebars

  " hbs is handlebars
  autocmd BufNewFile,BufRead *.hbs set ai filetype=handlebars

  " JSON is JS
  autocmd BufNewFile,BufRead *.json set ai filetype=javascript

  " execute jasmine tests
  autocmd FileType javascript nnoremap <buffer> tt :! clear && npm test<cr>

  " enable spell check
  autocmd FileType gitcommit setlocal spell spelllang=en_us,pt_br
  autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en_us,pt_br

" ========================================================================
" Abbreviations:
" ========================================================================
  abbreviate phpu PHPUnit_Framework_TestCase
  abbreviate funciton function
  abbreviate retrun return

" ========================================================================
" Appearence:
" ========================================================================
  color lucius
  " highlight ajustment
  highligh MatchParen cterm=bold ctermbg=none ctermfg=green

" ========================================================================
" Allow overriding these settings:
" ========================================================================
  if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
  endif
