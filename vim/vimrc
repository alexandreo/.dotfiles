" ========================================================================
" Plugins: Vundle config
" ========================================================================
  set nocompatible              " be iMproved, required
  filetype off                  " required

  " set the runtime path to include Vundle and initialize
  set rtp+=~/.vim/Vundle.vim
  call vundle#begin()

  source ~/.vim/plugins.vim

  " ending vundle
  call vundle#end()            " required
  filetype plugin indent on    " required

  source ~/.vim/functions.vim
" ========================================================================
" Options:
" ========================================================================
  set background=dark

  syntax on
  let mapleader = ","

  " different color for each paren pairs
  let vimclojure#ParenRainbow = 1

  set undodir=~/.vim/undodir
  set undofile
  if filewritable(&undodir) == 0
    call mkdir(&undodir, "p")
  endif

  set autoindent
  set autoread
  set backspace=2
  set backspace=indent,eol,start
  set clipboard=unnamedplus
  set colorcolumn=80
  set cursorline
  set directory=/tmp/
  set display=lastline
  set expandtab tabstop=2 softtabstop=2 shiftwidth=2
  set foldlevel=1
  set foldmethod=syntax
  set guicursor=a:blinkon0
  set hidden
  set hlsearch
  set ignorecase smartcase
  set laststatus=2
  set list
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
  set mouse=""
  set nobackup
  set noincsearch
  set noswapfile
  set nowrap
  set number numberwidth=2
  set pastetoggle=<F3>
  set ruler rulerformat=%=%l/%L
  set scrolloff=4 sidescrolloff=10
  set showcmd
  set showmatch
  set smarttab
  set splitbelow
  set splitright
  set tabpagemax=20
  set ttyfast
  set visualbell
  set wildmenu
  set wildmode=list:longest,full
  set statusline=[%n]\ %<%.99f\ %h%w%m%r%{ETry('CapsLockStatusline')}%y%{ETry('rails#statusline')}%{ETry('fugitive#statusline')}%#ErrorMsg#%*%=%-16(\ %l,%c-%v\ %)%P
  set tags+=./tags.vendors,tags.vendors

" ========================================================================
" Mappings:
" ========================================================================

  " tags
  nnoremap <f4> :! ctags <cr>

  " escape alias
  inoremap jj <esc>l
  inoremap kj <esc>l

  " navigation
  noremap <space> 10j
  noremap <leader><space> 10k

  " buffer changing
  nnoremap <leader>bn :bn<cr>
  nnoremap <leader>bp :bp<cr>

  " closes buffer
  nnoremap <leader>bd :bd<cr>
  nnoremap <leader>bdd :bd!<cr>
  nnoremap <leader>bda :bufdo %bd!<cr>
  nnoremap <leader>n :NERDTree<cr>

  " saves from normal mode
  nnoremap <leader>s :w<cr>
  nnoremap <leader>S :w<cr>

  " saves and exits insert mode
  inoremap <leader>s <ESC>:w<cr>
  inoremap <leader>S <ESC>:w<cr>

  " Select all
  nnoremap <leader>a ggVG

  " new tab
  nnoremap <c-w>t :tabnew<cr>

  " jumps to the next position after the closest closing char
  inoremap <leader>e <Esc>/[\]})"']<cr><Esc>:nohlsearch<cr>a
  nnoremap <leader>e <Esc>/[\]})"']<cr><Esc>:nohlsearch<cr>a

  " adds arrow
  inoremap <C-l> <Space>=><Space>

  " Ruby old style hashes to new style hashes
  vnoremap <leader>h :s/:\(\w*\) *=>/\1:/g<cr>

  " Rails specific
  " nnoremap <Leader>ac :sp app/controllers/application_controller.rb<cr>
  vnoremap <leader>h :s/\:\([a-zA-Z_]\+\)\s\+=>/\=printf("%s:", submatch(1))/g<CR><ESC>:let @/ = ""<CR>
  nnoremap <Leader>quit <ESC>:q<cr>

  " save and quit Run Ruby, for interactive editor
  nnoremap <Leader>rr <esc>:wq<CR>

  " Open vim rc
  nnoremap <Leader>vim :vsplit $MYVIMRC<CR>
  nnoremap <Leader>rel :source $MYVIMRC<CR>

  " Fix anoying original K
  nnoremap K <nop>
  nnoremap U <nop>

  " Find
  inoremap <leader>f <ESC>/
  nnoremap <leader>f <ESC>/

  " php specific
  autocmd FileType php inoremap ... ../
  autocmd FileType php inoremap .. ->
  autocmd FileType php inoremap ;; <esc>$a;

  " convert file to latin1 and reloads
  nnoremap <leader>lat1 :write ++enc=latin1<cr>:e<cr>

  " Use Q for formatting the current paragraph (or selection)
  vnoremap Q gq
  nnoremap Q gqap

  " clear search
  nnoremap <silent> ,/ :nohlsearch<CR>

  " Avoid arrow keys in command mode
  cnoremap <C-h> <left>
  cnoremap <C-j> <down>
  cnoremap <C-k> <up>
  cnoremap <C-l> <right>
  cnoremap <C-x> <del>

  " Control Ctrl and Ctrl V
  vnoremap <C-c> "+y
  vnoremap <leader>c "+y
  inoremap <C-v> <esc>:set paste<cr>"+p:set nopaste<cr>i
  nnoremap <leader>v :set paste<cr>"+p:set nopaste<cr>i

  " buffer resizing mappings (shift + arrow key)
  nnoremap <Up> <c-w>+
  nnoremap <Down> <c-w>-
  nnoremap <Left> <c-w><
  nnoremap <Right> <c-w>>

  " Trim all trailing whitespaces no questions asked.
  nnoremap <leader>tw :call TrimWhiteSpace()<cr>

  " Tab management
  nnoremap <leader>tn :tabnext<cr>
  nnoremap <leader>tp :tabprev<cr>

  " quotes
  " Single quote word
  nnoremap <leader>sq ciw''<esc><left>p
  " double quote word
  nnoremap <leader>dq ciw""<esc><left>p

  " Execute last command over a visual selection
  vnoremap . :norm.<CR>

  " Resolving conflics
  " Vimcasts #33
  nnoremap <leader>gd :Gdiff<cr>
  " get target version: diff get target
  nnoremap <leader>dgt :diffget //2 \| :diffupdate<cr>
  " get branch version: diff get branch
  nnoremap <leader>dgb :diffget //3 \| :diffupdate<cr>

  " quotes
  nnoremap <leader>qw ciw''<esc>P
  nnoremap <leader>qw ciw""<esc>P

  " sort block
  nnoremap <leader>sb vip:sort<cr>
  nnoremap <leader>sa vi(:sort<cr>

  " wrap selection inside caracter
  vnoremap ( "zdi(<C-R>z)<ESC>
  vnoremap { "zdi{<C-R>z}<ESC>
  vnoremap [ "zdi[<C-R>z]<ESC>
  vnoremap ' "zdi'<C-R>z'<ESC>
  vnoremap " "zdi"<C-R>z"<ESC>

  " does not work right after the plugin
  nnoremap <leader>wa :call argumentrewrap#RewrapArguments()<CR>

" ========================================================================
" Autocommands:
" ========================================================================
  autocmd BufWrite * :call <sid>MkdirsIfNotExists(expand('<afile>:h'))
  " TODO: find out why it wont work when the function is not herer
  function! <SID>MkdirsIfNotExists(directory)
    if(!isdirectory(a:directory))
      call system('mkdir -p '.shellescape(a:directory))
    endif
  endfunction

  autocmd FileType php nnoremap <buffer> tt <esc>:call PHPUnitCurrentFile()<cr>
  autocmd FileType php nnoremap <buffer> <leader>ta <esc>:call PHPUnitAll()<cr>
  autocmd FileType php nnoremap <buffer> <leader>tf <esc>:call PHPUnitFocused()<cr>
  autocmd FileType php nnoremap <buffer> <leader>tm <esc>:call PHPUnitZendModule()<cr>

  " remember last position in file
  autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif

  " Thorfile, Rakefile, Vagrantfile, and Gemfile are Ruby
  autocmd BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby

  " hb is handlebars
  autocmd BufNewFile,BufRead *.hb set ai filetype=handlebars

  " hbs is handlebars
  autocmd BufNewFile,BufRead *.hbs set ai filetype=handlebars

  " JSON is JS
  autocmd BufNewFile,BufRead *.json set ai filetype=javascript

  " execute jasmine tests
  autocmd FileType javascript nnoremap <buffer> tt :! clear && npm test<cr>

  " enable spell check
  autocmd FileType gitcommit setlocal spell spelllang=en_us,pt_br
  autocmd BufRead,BufNewFile *.md setlocal spell spelllang=en_us,pt_br

" ========================================================================
" Abbreviations:
" ========================================================================
  abbreviate phpu PHPUnit_Framework_TestCase
  abbreviate funciton function
  abbreviate retrun return

" ========================================================================
" Appearence:
" ========================================================================
  color lucius
  " highlight ajustment
  highligh MatchParen cterm=bold ctermbg=none ctermfg=green

" ========================================================================
" Allow overriding these settings:
" ========================================================================
  if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
  endif

